{
    "Two Sum": [
        12,
        "Easy",
        "LinkedIn(39)",
        "Uber(42)",
        "Airbnb(20)",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Apple(28)",
        "Yahoo(11)",
        "Dropbox(7)",
        "Bloomberg(57)",
        "Yelp(12)",
        "Adobe(12)"
    ],
    "Reverse Linked List": [
        12,
        "Easy",
        "Uber(42)",
        "Facebook(79)",
        "Twitter(21)",
        "Zenefit(21)",
        "Amazon(41)",
        "Microsoft(77)",
        "Snapchat(15)",
        "Apple(28)",
        "Yahoo(11)",
        "Bloomberg(57)",
        "Yelp(12)",
        "Adobe(12)"
    ],
    "LRU Cache": [
        11,
        "Hard",
        "Google(90)",
        "Uber(42)",
        "Facebook(79)",
        "Twitter(21)",
        "Zenefit(21)",
        "Amazon(41)",
        "Microsoft(77)",
        "Snapchat(15)",
        "Yahoo(11)",
        "Bloomberg(57)",
        "Palantir(7)"
    ],
    "Valid Parentheses": [
        8,
        "Easy",
        "Google(90)",
        "Airbnb(20)",
        "Facebook(79)",
        "Twitter(21)",
        "Zenefit(21)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Serialize and Deserialize Binary Tree": [
        8,
        "Hard",
        "LinkedIn(39)",
        "Google(90)",
        "Uber(42)",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Yahoo(11)",
        "Bloomberg(57)"
    ],
    "Merge k Sorted Lists": [
        8,
        "Hard",
        "LinkedIn(39)",
        "Google(90)",
        "Uber(42)",
        "Airbnb(20)",
        "Facebook(79)",
        "Twitter(21)",
        "Amazon(41)",
        "Microsoft(77)"
    ],
    "Merge Intervals": [
        7,
        "Hard",
        "LinkedIn(39)",
        "Google(90)",
        "Facebook(79)",
        "Twitter(21)",
        "Microsoft(77)",
        "Bloomberg(57)",
        "Yelp(12)"
    ],
    "Median of Two Sorted Arrays": [
        7,
        "Hard",
        "Google(90)",
        "Zenefit(21)",
        "Microsoft(77)",
        "Apple(28)",
        "Yahoo(11)",
        "Dropbox(7)",
        "Adobe(12)"
    ],
    "Binary Tree Level Order Traversal": [
        6,
        "Easy",
        "LinkedIn(39)",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Apple(28)",
        "Bloomberg(57)"
    ],
    "Implement Trie (Prefix Tree)": [
        6,
        "Medium",
        "Google(90)",
        "Uber(42)",
        "Facebook(79)",
        "Twitter(21)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Word Break": [
        6,
        "Medium",
        "Google(90)",
        "Uber(42)",
        "Facebook(79)",
        "Amazon(41)",
        "Yahoo(11)",
        "Bloomberg(57)"
    ],
    "Trapping Rain Water": [
        6,
        "Hard",
        "Google(90)",
        "Twitter(21)",
        "Zenefit(21)",
        "Amazon(41)",
        "Apple(28)",
        "Bloomberg(57)"
    ],
    "Min Stack": [
        6,
        "Easy",
        "Google(90)",
        "Uber(42)",
        "Zenefit(21)",
        "Amazon(41)",
        "Snapchat(15)",
        "Bloomberg(57)"
    ],
    "The Skyline Problem": [
        5,
        "Hard",
        "Google(90)",
        "Facebook(79)",
        "Twitter(21)",
        "Microsoft(77)",
        "Yelp(12)"
    ],
    "Reverse Words in a String": [
        5,
        "Medium",
        "Microsoft(77)",
        "Snapchat(15)",
        "Apple(28)",
        "Bloomberg(57)",
        "Yelp(12)"
    ],
    "Kth Largest Element in an Array": [
        5,
        "Medium",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Apple(28)",
        "Bloomberg(57)"
    ],
    "Number of Islands": [
        5,
        "Medium",
        "Google(90)",
        "Facebook(79)",
        "Zenefit(21)",
        "Amazon(41)",
        "Microsoft(77)"
    ],
    "3Sum": [
        5,
        "Medium",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)",
        "Adobe(12)"
    ],
    "Word Ladder": [
        5,
        "Medium",
        "LinkedIn(39)",
        "Facebook(79)",
        "Amazon(41)",
        "Snapchat(15)",
        "Yelp(12)"
    ],
    "Add Two Numbers": [
        5,
        "Medium",
        "Airbnb(20)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)",
        "Adobe(12)"
    ],
    "Word Break II": [
        5,
        "Hard",
        "Google(90)",
        "Uber(42)",
        "Twitter(21)",
        "Snapchat(15)",
        "Dropbox(7)"
    ],
    "Roman to Integer": [
        5,
        "Easy",
        "Uber(42)",
        "Facebook(79)",
        "Microsoft(77)",
        "Yahoo(11)",
        "Bloomberg(57)"
    ],
    "Search in Rotated Sorted Array": [
        5,
        "Hard",
        "LinkedIn(39)",
        "Uber(42)",
        "Facebook(79)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Best Time to Buy and Sell Stock": [
        5,
        "Easy",
        "Uber(42)",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Letter Combinations of a Phone Number": [
        5,
        "Medium",
        "Google(90)",
        "Uber(42)",
        "Facebook(79)",
        "Amazon(41)",
        "Dropbox(7)"
    ],
    "Regular Expression Matching": [
        5,
        "Hard",
        "Google(90)",
        "Uber(42)",
        "Airbnb(20)",
        "Facebook(79)",
        "Twitter(21)"
    ],
    "Group Anagrams": [
        5,
        "Medium",
        "Uber(42)",
        "Facebook(79)",
        "Amazon(41)",
        "Bloomberg(57)",
        "Yelp(12)"
    ],
    "Alien Dictionary": [
        5,
        "Hard",
        "Google(90)",
        "Airbnb(20)",
        "Facebook(79)",
        "Twitter(21)",
        "Snapchat(15)"
    ],
    "Lowest Common Ancestor of a Binary Tree": [
        5,
        "Medium",
        "LinkedIn(39)",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Apple(28)"
    ],
    "Product of Array Except Self": [
        5,
        "Medium",
        "LinkedIn(39)",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Apple(28)"
    ],
    "Validate Binary Search Tree": [
        4,
        "Medium",
        "Facebook(79)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Pow(x, n)": [
        4,
        "Medium",
        "LinkedIn(39)",
        "Google(90)",
        "Facebook(79)",
        "Bloomberg(57)"
    ],
    "Binary Search Tree Iterator": [
        4,
        "Medium",
        "LinkedIn(39)",
        "Google(90)",
        "Facebook(79)",
        "Microsoft(77)"
    ],
    "Maximum Depth of Binary Tree": [
        4,
        "Easy",
        "LinkedIn(39)",
        "Uber(42)",
        "Apple(28)",
        "Yahoo(11)"
    ],
    "Longest Substring Without Repeating Characters": [
        4,
        "Medium",
        "Amazon(41)",
        "Bloomberg(57)",
        "Yelp(12)",
        "Adobe(12)"
    ],
    "Flatten 2D Vector": [
        4,
        "Medium",
        "Google(90)",
        "Airbnb(20)",
        "Twitter(21)",
        "Zenefit(21)"
    ],
    "Lowest Common Ancestor of a Binary Search Tree": [
        4,
        "Easy",
        "Facebook(79)",
        "Twitter(21)",
        "Amazon(41)",
        "Microsoft(77)"
    ],
    "Linked List Cycle": [
        4,
        "Medium",
        "Amazon(41)",
        "Microsoft(77)",
        "Yahoo(11)",
        "Bloomberg(57)"
    ],
    "String to Integer (atoi)": [
        4,
        "Easy",
        "Uber(42)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Merge Two Sorted Lists": [
        4,
        "Easy",
        "LinkedIn(39)",
        "Amazon(41)",
        "Microsoft(77)",
        "Apple(28)"
    ],
    "Valid Palindrome": [
        4,
        "Easy",
        "Uber(42)",
        "Facebook(79)",
        "Zenefit(21)",
        "Microsoft(77)"
    ],
    "Copy List with Random Pointer": [
        4,
        "Hard",
        "Uber(42)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "One Edit Distance": [
        4,
        "Medium",
        "Uber(42)",
        "Facebook(79)",
        "Twitter(21)",
        "Snapchat(15)"
    ],
    "Intersection of Two Linked Lists": [
        4,
        "Easy",
        "Airbnb(20)",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Happy Number": [
        3,
        "Easy",
        "Uber(42)",
        "Airbnb(20)",
        "Twitter(21)"
    ],
    "Binary Tree Zigzag Level Order Traversal": [
        3,
        "Medium",
        "LinkedIn(39)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Symmetric Tree": [
        3,
        "Easy",
        "LinkedIn(39)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Word Search II": [
        3,
        "Hard",
        "Google(90)",
        "Airbnb(20)",
        "Microsoft(77)"
    ],
    "Minimum Window Substring": [
        3,
        "Hard",
        "LinkedIn(39)",
        "Uber(42)",
        "Facebook(79)"
    ],
    "Kth Smallest Element in a BST": [
        3,
        "Medium",
        "Google(90)",
        "Uber(42)",
        "Bloomberg(57)"
    ],
    "Sliding Window Maximum": [
        3,
        "Hard",
        "Google(90)",
        "Zenefit(21)",
        "Amazon(41)"
    ],
    "Search a 2D Matrix II": [
        3,
        "Medium",
        "Google(90)",
        "Amazon(41)",
        "Apple(28)"
    ],
    "Course Schedule": [
        3,
        "Medium",
        "Zenefit(21)",
        "Apple(28)",
        "Yelp(12)"
    ],
    "Delete Node in a Linked List": [
        3,
        "Easy",
        "Microsoft(77)",
        "Apple(28)",
        "Adobe(12)"
    ],
    "Generate Parentheses": [
        3,
        "Medium",
        "Google(90)",
        "Uber(42)",
        "Zenefit(21)"
    ],
    "Binary Tree Paths": [
        3,
        "Easy",
        "Google(90)",
        "Facebook(79)",
        "Apple(28)"
    ],
    "Graph Valid Tree": [
        3,
        "Medium",
        "Google(90)",
        "Facebook(79)",
        "Zenefit(21)"
    ],
    "Excel Sheet Column Title": [
        3,
        "Easy",
        "Facebook(79)",
        "Zenefit(21)",
        "Microsoft(77)"
    ],
    "Populating Next Right Pointers in Each Node II": [
        3,
        "Hard",
        "Facebook(79)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Closest Binary Search Tree Value": [
        3,
        "Easy",
        "Google(90)",
        "Microsoft(77)",
        "Snapchat(15)"
    ],
    "H-Index": [
        3,
        "Medium",
        "Google(90)",
        "Facebook(79)",
        "Bloomberg(57)"
    ],
    "Wildcard Matching": [
        3,
        "Hard",
        "Google(90)",
        "Facebook(79)",
        "Snapchat(15)"
    ],
    "Peeking Iterator": [
        3,
        "Medium",
        "Google(90)",
        "Apple(28)",
        "Yahoo(11)"
    ],
    "Merge Sorted Array": [
        3,
        "Easy",
        "Facebook(79)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Game of Life": [
        3,
        "Medium",
        "Google(90)",
        "Snapchat(15)",
        "Dropbox(7)"
    ],
    "Binary Tree Vertical Order Traversal": [
        3,
        "Medium",
        "Google(90)",
        "Facebook(79)",
        "Snapchat(15)"
    ],
    "Word Search": [
        3,
        "Medium",
        "Facebook(79)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Sqrt(x)": [
        3,
        "Medium",
        "Facebook(79)",
        "Apple(28)",
        "Bloomberg(57)"
    ],
    "Spiral Matrix": [
        3,
        "Medium",
        "Google(90)",
        "Uber(42)",
        "Microsoft(77)"
    ],
    "Longest Palindromic Substring": [
        3,
        "Medium",
        "Amazon(41)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Swap Nodes in Pairs": [
        3,
        "Easy",
        "Uber(42)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Valid Sudoku": [
        3,
        "Easy",
        "Uber(42)",
        "Snapchat(15)",
        "Apple(28)"
    ],
    "Implement strStr()": [
        3,
        "Easy",
        "Facebook(79)",
        "Microsoft(77)",
        "Apple(28)"
    ],
    "Subsets": [
        3,
        "Medium",
        "Uber(42)",
        "Facebook(79)",
        "Amazon(41)"
    ],
    "Decode Ways": [
        3,
        "Medium",
        "Uber(42)",
        "Facebook(79)",
        "Microsoft(77)"
    ],
    "Insert Interval": [
        3,
        "Hard",
        "LinkedIn(39)",
        "Google(90)",
        "Facebook(79)"
    ],
    "Clone Graph": [
        3,
        "Medium",
        "Google(90)",
        "Uber(42)",
        "Facebook(79)"
    ],
    "Max Points on a Line": [
        3,
        "Hard",
        "LinkedIn(39)",
        "Twitter(21)",
        "Apple(28)"
    ],
    "Maximum Subarray": [
        3,
        "Medium",
        "LinkedIn(39)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Remove Duplicates from Sorted Array": [
        3,
        "Easy",
        "Facebook(79)",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Reverse Words in a String II": [
        3,
        "Medium",
        "Uber(42)",
        "Amazon(41)",
        "Microsoft(77)"
    ],
    "Maximal Square": [
        3,
        "Medium",
        "Airbnb(20)",
        "Facebook(79)",
        "Apple(28)"
    ],
    "Valid Anagram": [
        3,
        "Easy",
        "Uber(42)",
        "Amazon(41)",
        "Yelp(12)"
    ],
    "Contains Duplicate": [
        3,
        "Easy",
        "Airbnb(20)",
        "Yahoo(11)",
        "Palantir(7)"
    ],
    "Read N Characters Given Read4 II - Call multiple times": [
        3,
        "Hard",
        "Google(90)",
        "Facebook(79)",
        "Bloomberg(57)"
    ],
    "Rotate Image": [
        3,
        "Medium",
        "Amazon(41)",
        "Microsoft(77)",
        "Apple(28)"
    ],
    "Meeting Rooms II": [
        2,
        "Medium",
        "Google(90)",
        "Facebook(79)"
    ],
    "Single Number": [
        2,
        "Medium",
        "Airbnb(20)",
        "Palantir(7)"
    ],
    "Reverse Bits": [
        2,
        "Easy",
        "Airbnb(20)",
        "Apple(28)"
    ],
    "Word Pattern": [
        2,
        "Easy",
        "Uber(42)",
        "Dropbox(7)"
    ],
    "Contains Duplicate II": [
        2,
        "Easy",
        "Airbnb(20)",
        "Palantir(7)"
    ],
    "Contains Duplicate III": [
        2,
        "Medium",
        "Airbnb(20)",
        "Palantir(7)"
    ],
    "Factor Combinations": [
        2,
        "Medium",
        "LinkedIn(39)",
        "Uber(42)"
    ],
    "Permutations II": [
        2,
        "Medium",
        "LinkedIn(39)",
        "Microsoft(77)"
    ],
    "Reverse Nodes in k-Group": [
        2,
        "Hard",
        "Facebook(79)",
        "Microsoft(77)"
    ],
    "Excel Sheet Column Number": [
        2,
        "Easy",
        "Uber(42)",
        "Microsoft(77)"
    ],
    "Combination Sum": [
        2,
        "Medium",
        "Uber(42)",
        "Snapchat(15)"
    ],
    "Multiply Strings": [
        2,
        "Medium",
        "Facebook(79)",
        "Twitter(21)"
    ],
    "Palindrome Pairs": [
        2,
        "Hard",
        "Google(90)",
        "Airbnb(20)"
    ],
    "Simplify Path": [
        2,
        "Medium",
        "Facebook(79)",
        "Microsoft(77)"
    ],
    "Sort Colors": [
        2,
        "Medium",
        "Facebook(79)",
        "Microsoft(77)"
    ],
    "Shortest Distance from All Buildings": [
        2,
        "Hard",
        "Google(90)",
        "Zenefit(21)"
    ],
    "Walls and Gates": [
        2,
        "Medium",
        "Google(90)",
        "Facebook(79)"
    ],
    "Expression Add Operators": [
        2,
        "Hard",
        "Google(90)",
        "Facebook(79)"
    ],
    "Text Justification": [
        2,
        "Hard",
        "LinkedIn(39)",
        "Airbnb(20)"
    ],
    "Palindrome Permutation": [
        2,
        "Easy",
        "Google(90)",
        "Uber(42)"
    ],
    "Course Schedule II": [
        2,
        "Medium",
        "Facebook(79)",
        "Zenefit(21)"
    ],
    "Permutations": [
        2,
        "Medium",
        "LinkedIn(39)",
        "Microsoft(77)"
    ],
    "Palindrome Linked List": [
        2,
        "Easy",
        "Facebook(79)",
        "Amazon(41)"
    ],
    "Word Pattern II": [
        2,
        "Hard",
        "Uber(42)",
        "Dropbox(7)"
    ],
    "Integer to English Words": [
        2,
        "Hard",
        "Facebook(79)",
        "Microsoft(77)"
    ],
    "Move Zeroes": [
        2,
        "Easy",
        "Facebook(79)",
        "Bloomberg(57)"
    ],
    "Inorder Successor in BST": [
        2,
        "Medium",
        "Facebook(79)",
        "Microsoft(77)"
    ],
    "Maximum Size Subarray Sum Equals k": [
        2,
        "Easy",
        "Facebook(79)",
        "Palantir(7)"
    ],
    "Pascal's Triangle": [
        2,
        "Easy",
        "Twitter(21)",
        "Apple(28)"
    ],
    "Majority Element": [
        2,
        "Easy",
        "Zenefit(21)",
        "Adobe(12)"
    ],
    "Group Shifted Strings": [
        2,
        "Easy",
        "Google(90)",
        "Uber(42)"
    ],
    "Find Peak Element": [
        2,
        "Medium",
        "Google(90)",
        "Microsoft(77)"
    ],
    "Longest Consecutive Sequence": [
        2,
        "Hard",
        "Google(90)",
        "Facebook(79)"
    ],
    "House Robber": [
        2,
        "Easy",
        "LinkedIn(39)",
        "Airbnb(20)"
    ],
    "Word Ladder II": [
        2,
        "Hard",
        "Amazon(41)",
        "Yelp(12)"
    ],
    "Sparse Matrix Multiplication": [
        2,
        "Medium",
        "LinkedIn(39)",
        "Facebook(79)"
    ],
    "Count Primes": [
        2,
        "Easy",
        "Amazon(41)",
        "Microsoft(77)"
    ],
    "Compare Version Numbers": [
        2,
        "Easy",
        "Microsoft(77)",
        "Apple(28)"
    ],
    "Rotate Array": [
        2,
        "Easy",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Number of 1 Bits": [
        2,
        "Easy",
        "Microsoft(77)",
        "Apple(28)"
    ],
    "Implement Queue using Stacks": [
        2,
        "Easy",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Find the Celebrity": [
        2,
        "Medium",
        "LinkedIn(39)",
        "Facebook(79)"
    ],
    "Add Digits": [
        2,
        "Easy",
        "Microsoft(77)",
        "Adobe(12)"
    ],
    "Missing Number": [
        2,
        "Medium",
        "Microsoft(77)",
        "Bloomberg(57)"
    ],
    "Reverse Integer": [
        2,
        "Easy",
        "Apple(28)",
        "Bloomberg(57)"
    ],
    "Climbing Stairs": [
        2,
        "Easy",
        "Apple(28)",
        "Adobe(12)"
    ],
    "Two Sum III - Data structure design": [
        1,
        "Easy",
        "LinkedIn(39)"
    ],
    "Isomorphic Strings": [
        1,
        "Easy",
        "LinkedIn(39)"
    ],
    "3Sum Smaller": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Longest Substring with At Most Two Distinct Characters": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Next Permutation": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Missing Ranges": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Fraction to Recurring Decimal": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Shortest Word Distance II": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "Encode and Decode Strings": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Trips and Users": [
        1,
        "Hard",
        "Uber(42)"
    ],
    "Closest Binary Search Tree Value II": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Binary Tree Upside Down": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "House Robber III": [
        1,
        "Medium",
        "Uber(42)"
    ],
    "Paint Fence": [
        1,
        "Easy",
        "Google(90)"
    ],
    "Convert Sorted Array to Binary Search Tree": [
        1,
        "Medium",
        "Airbnb(20)"
    ],
    "Perfect Squares": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Wiggle Sort": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Zigzag Iterator": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Shortest Word Distance": [
        1,
        "Easy",
        "LinkedIn(39)"
    ],
    "Nested List Weight Sum": [
        1,
        "Easy",
        "LinkedIn(39)"
    ],
    "Shortest Palindrome": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Unique Word Abbreviation": [
        1,
        "Easy",
        "Google(90)"
    ],
    "Plus One": [
        1,
        "Easy",
        "Google(90)"
    ],
    "Flip Game": [
        1,
        "Easy",
        "Google(90)"
    ],
    "Flip Game II": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Find Median from Data Stream": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Count and Say": [
        1,
        "Easy",
        "Facebook(79)"
    ],
    "Binary Tree Longest Consecutive Sequence": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Add Binary": [
        1,
        "Easy",
        "Facebook(79)"
    ],
    "Smallest Rectangle Enclosing Black Pixels": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Number of Islands II": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Range Sum Query 2D - Mutable": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Best Time to Buy and Sell Stock with Cooldown": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Remove Duplicates from Sorted Array II": [
        1,
        "Medium",
        "Facebook(79)"
    ],
    "Maximal Rectangle": [
        1,
        "Hard",
        "Facebook(79)"
    ],
    "Minimum Height Trees": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Subsets II": [
        1,
        "Medium",
        "Facebook(79)"
    ],
    "Burst Balloons": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Super Ugly Number": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Read N Characters Given Read4": [
        1,
        "Easy",
        "Facebook(79)"
    ],
    "Basic Calculator": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Minimum Size Subarray Sum": [
        1,
        "Medium",
        "Facebook(79)"
    ],
    "Count of Smaller Numbers After Self": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Add and Search Word - Data structure design": [
        1,
        "Medium",
        "Facebook(79)"
    ],
    "Remove Duplicate Letters": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Summary Ranges": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Maximum Product of Word Lengths": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Meeting Rooms": [
        1,
        "Easy",
        "Facebook(79)"
    ],
    "Paint House II": [
        1,
        "Hard",
        "Facebook(79)"
    ],
    "Generalized Abbreviation": [
        1,
        "Medium",
        "Google(90)"
    ],
    "H-Index II": [
        1,
        "Medium",
        "Facebook(79)"
    ],
    "First Bad Version": [
        1,
        "Easy",
        "Facebook(79)"
    ],
    "Create Maximum Number": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Number of Connected Components in an Undirected Graph": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Remove Invalid Parentheses": [
        1,
        "Hard",
        "Facebook(79)"
    ],
    "Wiggle Sort II": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Increasing Triplet Subsequence": [
        1,
        "Medium",
        "Facebook(79)"
    ],
    "Integer to Roman": [
        1,
        "Medium",
        "Twitter(21)"
    ],
    "Permutation Sequence": [
        1,
        "Medium",
        "Twitter(21)"
    ],
    "Power of Three": [
        1,
        "Easy",
        "Google(90)"
    ],
    "Best Meeting Point": [
        1,
        "Hard",
        "Twitter(21)"
    ],
    "N-Queens II": [
        1,
        "Hard",
        "Zenefit(21)"
    ],
    "Convert Sorted List to Binary Search Tree": [
        1,
        "Medium",
        "Zenefit(21)"
    ],
    "Count of Range Sum": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Longest Increasing Path in a Matrix": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Majority Element II": [
        1,
        "Medium",
        "Zenefit(21)"
    ],
    "Verify Preorder Sequence in Binary Search Tree": [
        1,
        "Medium",
        "Zenefit(21)"
    ],
    "Patching Array": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Verify Preorder Serialization of a Binary Tree": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Reconstruct Itinerary": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Gray Code": [
        1,
        "Medium",
        "Amazon(41)"
    ],
    "Paint House": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "Longest Substring with At Most K Distinct Characters": [
        1,
        "Hard",
        "Google(90)"
    ],
    "Two Sum II - Input array is sorted": [
        1,
        "Medium",
        "Amazon(41)"
    ],
    "Binary Tree Right Side View": [
        1,
        "Medium",
        "Amazon(41)"
    ],
    "Flatten Nested List Iterator": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Jump Game": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Set Matrix Zeroes": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Binary Tree Inorder Traversal": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Construct Binary Tree from Inorder and Postorder Traversal": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Path Sum": [
        1,
        "Easy",
        "Microsoft(77)"
    ],
    "Flatten Binary Tree to Linked List": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Populating Next Right Pointers in Each Node": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Binary Tree Maximum Path Sum": [
        1,
        "Hard",
        "Microsoft(77)"
    ],
    "Search for a Range": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "Find Minimum in Rotated Sorted Array": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Power of Two": [
        1,
        "Easy",
        "Google(90)"
    ],
    "Dungeon Game": [
        1,
        "Hard",
        "Microsoft(77)"
    ],
    "Repeated DNA Sequences": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "Maximum Product Subarray": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "House Robber II": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Strobogrammatic Number": [
        1,
        "Easy",
        "Google(90)"
    ],
    "Sudoku Solver": [
        1,
        "Hard",
        "Uber(42)"
    ],
    "Strobogrammatic Number II": [
        1,
        "Medium",
        "Google(90)"
    ],
    "Valid Number": [
        1,
        "Hard",
        "LinkedIn(39)"
    ],
    "Longest Increasing Subsequence": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Largest BST Subtree": [
        1,
        "Medium",
        "Microsoft(77)"
    ],
    "Unique Binary Search Trees": [
        1,
        "Medium",
        "Snapchat(15)"
    ],
    "Evaluate Reverse Polish Notation": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "Shortest Word Distance III": [
        1,
        "Medium",
        "LinkedIn(39)"
    ],
    "Container With Most Water": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "3Sum Closest": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "Unique Paths": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "Unique Paths II": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "Same Tree": [
        1,
        "Easy",
        "Bloomberg(57)"
    ],
    "Construct Binary Tree from Preorder and Inorder Traversal": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "Balanced Binary Tree": [
        1,
        "Easy",
        "Bloomberg(57)"
    ],
    "Path Sum II": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "Best Time to Buy and Sell Stock II": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "Palindrome Partitioning": [
        1,
        "Medium",
        "Bloomberg(57)"
    ],
    "Factorial Trailing Zeroes": [
        1,
        "Easy",
        "Bloomberg(57)"
    ],
    "Implement Stack using Queues": [
        1,
        "Easy",
        "Bloomberg(57)"
    ],
    "Find the Duplicate Number": [
        1,
        "Hard",
        "Bloomberg(57)"
    ],
    "Longest Common Prefix": [
        1,
        "Easy",
        "Yelp(12)"
    ],
    "Range Sum Query - Immutable": [
        1,
        "Easy",
        "Palantir(7)"
    ],
    "Tenth Line": [
        1,
        "Easy",
        "Adobe(12)"
    ],
    "Nim Game": [
        1,
        "Easy",
        "Adobe(12)"
    ]
}
